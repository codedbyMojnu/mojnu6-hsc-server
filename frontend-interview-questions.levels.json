[{
  "_id": {
    "$oid": "6862a2cddb91ea33a26a58a3"
  },
  "question": "## ‚ùì Question\n\nWhat will be the **output** of this code?\n\n```js\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n```",
  "options": [],
  "hint": "> Think about **when** the `console.log(i)` actually runs. Does it run **during** the loop, or **after** the loop finishes?\n\n**Also remember:**\n\n* `var` is **function-scoped**, so there's only **one `i`** shared across all iterations.\n",
  "answer": "3 3 3",
  "explanation": "## üí¨ Explanation\n\n* `var` is **function-scoped**, not block-scoped.\n* When the loop runs, it increases `i` from 0 to 3.\n* By the time the `setTimeout` callbacks run after 1 second, the loop has already finished, and `i` is now 3.\n* All callbacks refer to the **same `i`**, which is 3.\n\n---\n\n### üí° How to fix it?\n\nUse `let` instead of `var`:\n\n```js\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => {\n    console.log(i);\n  }, 1000);\n}\n```\n\nThen output will be:\n\n```\n0\n1\n2\n```",
  "category": "Advanced",
  "createdAt": {
    "$date": "2025-06-30T14:44:29.642Z"
  },
  "updatedAt": {
    "$date": "2025-06-30T15:08:06.200Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "68635eda58a505d420a45a2a"
  },
  "question": "What value will `console.log(a)` and `console.log(b)` print?\n```js\nfunction testScope() {\n  if (true) {\n    var a = 5;\n    let b = 10;\n  }\n  console.log(a); // What will this print?\n  console.log(b); // What will this print?\n}\ntestScope();\n```",
  "options": [
    "5 undefined",
    "5 NaN",
    "5 ReferenceError",
    "5 null"
  ],
  "hint": "\nüí° **Hint:**\n\n* `var` is **function scoped**, not block scoped.\n* `let` is **block scoped**, available only inside `{}`.\n",
  "answer": "5 ReferenceError",
  "explanation": "**‚úÖ Explanation:**\n\n* `var` is **function scoped**.\n  When you declare `var a = 5;`, `a` becomes accessible anywhere inside the function `testScope()`.\n\n* `let` is **block scoped**.\n  `b` is declared inside the `if (true) { ... }` block, so it only exists inside that block.\n\nWhen `console.log(b)` runs, it is **not defined** outside the block, so it throws an error:\n\n```\nReferenceError: b is not defined\n```\n\n### ‚≠ê **Summary of your answers**\n\n| Quiz  | Your Answer   | Correct? | Explanation                                                        |\n| ----- | ------------- | -------- | ------------------------------------------------------------------ |\n| 1 (a) | 5             | ‚úÖ        | Because `var` is function scoped.                                  |\n| 1 (b) | undefined     | ‚ùå        | Actually causes ReferenceError since `let` is block scoped.        |",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T04:06:50.888Z"
  },
  "updatedAt": {
    "$date": "2025-07-02T08:16:03.269Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "6863666aeb3f63535f39b59a"
  },
  "question": "What will be the output of this code?\n\n```js\nconst user = {\n  name: \"Mojnu\"\n};\nuser.name = \"Miah\";\nconsole.log(user.name);\n```",
  "options": [],
  "hint": "### üí° Hint\n\n* `const` **prevents reassigning** the whole object, but **allows changing properties** inside the object.\n* You can't do `user = {}`, but you can update `user.name`.\n\n\n\n",
  "answer": "Miah",
  "explanation": "### üí¨ Explanation\n\n* `const` makes the **variable binding constant**, not the **object content**.\n* You can still **modify properties** of a `const` object.\n* In this example, `user.name` is updated to `\"Miah\"`, so it prints:\n\n```\nMiah\n```",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T04:39:06.994Z"
  },
  "updatedAt": {
    "$date": "2025-07-01T04:39:06.994Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "68636bc9eb3f63535f39b643"
  },
  "question": "What are JavaScript‚Äôs **primitive data types**?",
  "options": [
    "String Number NaN",
    "Boolen Number Int",
    "Null Undefiened NaN",
    "Undefiened Symbol BigInt"
  ],
  "hint": "### üí° Hint\n\n* Primitive types are immutable, not objects.\n* Think: string, number, etc.\n\n‚úÖ **Answer is one them in below. just type in the box:**\n\n* string and number\n* string, number, boolean, null, undefined, symbol, bigint\n* string, number, object\n\n\n\n",
  "answer": "Undefiened Symbol BigInt",
  "explanation": "### üí¨ Explanation\n\n* JS has **7 primitive types**: string, number, boolean, null, undefined, symbol, and bigint.\n* Anything else (like arrays, functions, objects) is considered an **object**.",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T05:02:01.413Z"
  },
  "updatedAt": {
    "$date": "2025-07-02T08:18:33.801Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "68636dc0eb3f63535f39b696"
  },
  "question": "What does `typeof null` return in JavaScript?\n\n```js\nconsole.log(typeof null);\n```",
  "options": [],
  "hint": "### üí° Hint\n\n* Historically considered a bug in JS.\n* It doesn't return \"null\"!\n\n‚úÖ **Answer like this:**\n\n* \"null\"\n* \"object\"\n* \"undefined\"",
  "answer": "object",
  "explanation": "### üí¨ Explanation\n\n* `typeof null` returns `\"object\"`.\n* This is a **long-standing bug** in JavaScript kept for backward compatibility.\n* Even though `null` is a primitive, `typeof` incorrectly identifies it as an object.",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T05:10:24.109Z"
  },
  "updatedAt": {
    "$date": "2025-07-02T08:18:58.771Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "686372c6eb3f63535f39b78a"
  },
  "question": "Rewrite this code using a **template literal**:\n\n```js\n'Hello ' + name + '!'\n```",
  "options": [],
  "hint": "### üí° Hint\n\n* Use backticks `` ` ``, and `${}` for inserting variables.\n\n‚úÖ **Answer like this:**\n\n* `'Hello ${name}'`\n* `Hello + name + !`\n\n",
  "answer": "`Hello ${name}!`",
  "explanation": "### ‚úÖ Answer\n\n`` `Hello ${name}!` ``\n\n### üí¨ Explanation\n\n* Template literals use **backticks**.\n* Variables or expressions are included inside `${}`.\n* This makes string building cleaner and easier to read.",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T05:31:50.236Z"
  },
  "updatedAt": {
    "$date": "2025-07-01T05:31:50.236Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "6863747beb3f63535f39b7a9"
  },
  "question": "Can you include **expressions** (like `2 + 2`) inside `${}` in template literals?",
  "options": [],
  "hint": "### üí° Hint\n\n* You can put not only variables but also any **valid expression**.\n\n‚úÖ **Answer like this:**\n\n* yes\n* no\n* Only simple variables\n\n",
  "answer": "yes",
  "explanation": "### ‚úÖ Answer\n\nYes\n\n### üí¨ Explanation\n\n* You can include **any JavaScript expression** inside `${}`.\n* Example:\n\n```js\nconsole.log(`2 + 2 = ${2 + 2}`); // Output: 2 + 2 = 4\n```",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T05:39:07.706Z"
  },
  "updatedAt": {
    "$date": "2025-07-01T05:39:07.706Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "6863761beb3f63535f39b7d1"
  },
  "question": "Rewrite this function using **arrow function** syntax:\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n```",
  "options": [],
  "hint": "### üí° Hint\n\n* Arrow function ‡¶è `function` ‡¶ï‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ‡•§\n* ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø `=>` ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡ßü‡•§\n\n‚úÖ **Answer like this:**\n\n* `(a, b) => a + b`\n\n\n",
  "answer": "const add =(a, b)=> a + b;",
  "explanation": "### üí¨ Explanation\n\n* Arrow function ‡¶è ‡¶õ‡ßã‡¶ü function ‡¶π‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø `return` ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§\n* ‡¶Ø‡¶¶‡¶ø body {} ‡¶¶‡¶æ‡¶ì, ‡¶§‡¶ñ‡¶® `return` ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T05:46:03.614Z"
  },
  "updatedAt": {
    "$date": "2025-07-02T07:13:20.214Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "68637740eb3f63535f39b7ec"
  },
  "question": "How does **`this`** behave differently in arrow functions?",
  "options": [],
  "hint": "### üí° Hint\n\n* Arrow function ‡¶è‡¶∞ **`this`** binding ‡¶π‡ßü parent scope ‡¶•‡ßá‡¶ï‡ßá‡•§\n* Regular function ‡¶è‡¶∞ `this` dynamic ‡¶π‡ßü‡•§\n\n‚úÖ **Answer like this:**\n\n* Lexical\n* Dynamic\n* Block scoped\n\n",
  "answer": "Lexical",
  "explanation": "### ‚úÖ Answer\n\nLexical\n\n### üí¨ Explanation\n\n* Arrow function ‡¶è‡¶∞ **`this`** ‡¶π‡¶≤‡ßã **lexical**, ‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶∏‡ßá‡¶á outer scope ‡¶•‡ßá‡¶ï‡ßá `this` ‡¶®‡ßá‡ßü‡•§\n* Regular function ‡¶è `this` runtime ‡¶è ‡¶†‡¶ø‡¶ï ‡¶π‡ßü (‡¶Ø‡ßá‡¶Æ‡¶® object ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá call ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßá‡¶á object ‡¶π‡ßü)‡•§",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T05:50:56.450Z"
  },
  "updatedAt": {
    "$date": "2025-07-01T05:50:56.450Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "6863821beb3f63535f39b81a"
  },
  "question": "What will be the output?\n\n```js\nconst person = {\n  name: \"Mojnu\",\n  greet: function () {\n    setTimeout(() => {\n      console.log(`Hello, ${this.name}`);\n    }, 1000);\n  }\n};\n\nperson.greet();\n```",
  "options": [],
  "hint": "### üí° Hint\n\n* Arrow function ‡¶è‡¶∞ `this` bind ‡¶π‡ßü outer `greet` function ‡¶•‡ßá‡¶ï‡ßá‡•§\n* Regular function ‡¶¶‡¶ø‡¶≤‡ßá `this` undefined ‡¶π‡¶§ ‡¶¨‡¶æ window/global ‡¶π‡¶§‡•§\n\n‚úÖ **Answer like this:**\n\n* Hello, undefined\n* Error\n\n",
  "answer": "Hello, Mojnu",
  "explanation": "### ‚úÖ Answer\n\nHello, Mojnu\n\n### üí¨ Explanation\n\n* ‡¶è‡¶ñ‡¶æ‡¶®‡ßá `setTimeout` ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá arrow function ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\n* ‡¶§‡¶æ‡¶á `this` ‡¶ï‡ßá outer `greet` method ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡ßü, ‡¶Ø‡ßá‡¶ü‡¶ø ‡¶π‡¶≤‡ßã `person` object‡•§\n* ‡¶§‡¶æ‡¶á output: **Hello, Mojnu**",
  "category": "General",
  "createdAt": {
    "$date": "2025-07-01T06:37:15.408Z"
  },
  "updatedAt": {
    "$date": "2025-07-02T08:20:05.221Z"
  },
  "__v": 0
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea35595"
  },
  "question": "Which of the following is NOT a JavaScript primitive type?",
  "options": [
    "string",
    "number",
    "object",
    "boolean"
  ],
  "hint": "Objects are not primitive types.",
  "answer": "object",
  "explanation": "Primitive types in JavaScript are string, number, boolean, null, undefined, symbol, and bigint. 'object' is not a primitive.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea35596"
  },
  "question": "What will be logged to the console?\n\n```js\nlet x = 1;\nif (function f(){}) {\n  x += typeof f;\n}\nconsole.log(x);\n```",
  "options": [
    "1undefined",
    "1function",
    "1object",
    "1number"
  ],
  "hint": "Function declarations inside if conditions are not hoisted in all environments.",
  "answer": "1undefined",
  "explanation": "The function f is not defined in the block scope, so typeof f is 'undefined'.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea35597"
  },
  "question": "What is the result of `0.1 + 0.2 === 0.3` in JavaScript?",
  "options": [],
  "hint": "Floating point arithmetic is not always precise.",
  "answer": "false",
  "explanation": "0.1 + 0.2 is 0.30000000000000004 due to floating point precision issues.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea35598"
  },
  "question": "Which array method returns the first element that satisfies a provided testing function?",
  "options": [
    "find",
    "filter",
    "map",
    "forEach"
  ],
  "hint": "It returns a single element, not an array.",
  "answer": "find",
  "explanation": "Array.prototype.find returns the first element that matches the condition.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea35599"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([...'hello'].length);\n```",
  "options": [],
  "hint": "The spread operator splits the string into characters.",
  "answer": "5",
  "explanation": "[...'hello'] creates an array of 5 characters.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea3559a"
  },
  "question": "Which of the following is a controlled component in React?",
  "options": [
    "<input value={value} onChange={setValue} />",
    "<input defaultValue='hi' />",
    "<input />",
    "<input ref={ref} />"
  ],
  "hint": "Controlled components have their value controlled by React state.",
  "answer": "<input value={value} onChange={setValue} />",
  "explanation": "A controlled component is one whose value is controlled by React state.",
  "category": "React"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea3559b"
  },
  "question": "What hook would you use to perform side effects in a React function component?",
  "options": [
    "useEffect",
    "useState",
    "useRef",
    "useMemo"
  ],
  "hint": "It's the most common hook for side effects.",
  "answer": "useEffect",
  "explanation": "useEffect is used for side effects like data fetching, subscriptions, etc.",
  "category": "React"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea3559c"
  },
  "question": "What is the output of the following code?\n\n```js\nconst [a, ...b] = [1, 2, 3, 4];\nconsole.log(b.length);\n```",
  "options": [],
  "hint": "The rest operator collects the remaining elements into an array.",
  "answer": "3",
  "explanation": "b is [2, 3, 4], so b.length is 3.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea3559d"
  },
  "question": "Which command initializes a new Git repository?",
  "options": [
    "git init",
    "git start",
    "git new",
    "git create"
  ],
  "hint": "It's a two-word command.",
  "answer": "git init",
  "explanation": "'git init' initializes a new Git repository.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea3559e"
  },
  "question": "What is the command to create a new branch in Git?",
  "options": [
    "git branch <branch>",
    "git checkout <branch>",
    "git new <branch>",
    "git create <branch>"
  ],
  "hint": "It uses the 'branch' keyword.",
  "answer": "git branch <branch>",
  "explanation": "'git branch <branch>' creates a new branch.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea3559f"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log(!!'false' == !!'true');\n```",
  "options": [],
  "hint": "Both are non-empty strings.",
  "answer": "true",
  "explanation": "Both 'false' and 'true' are non-empty strings, so !!'false' and !!'true' are both true.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a0"
  },
  "question": "Which TailwindCSS class makes text bold?",
  "options": [
    "font-bold",
    "font-semibold",
    "font-medium",
    "font-black"
  ],
  "hint": "Look for the class with 'bold' in its name.",
  "answer": "font-bold",
  "explanation": "'font-bold' makes text bold in TailwindCSS.",
  "category": "TailwindCSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a1"
  },
  "question": "How do you apply a background color of blue-500 in TailwindCSS?",
  "options": [
    "bg-blue-500",
    "background-blue-500",
    "bg-blue",
    "bg-500-blue"
  ],
  "hint": "Tailwind uses 'bg-' prefix for background colors.",
  "answer": "bg-blue-500",
  "explanation": "'bg-blue-500' applies a blue background.",
  "category": "TailwindCSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a2"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].map(x => x * x));\n```",
  "options": [
    "[1, 4, 9]",
    "[1, 2, 3]",
    "[2, 4, 6]",
    "[1, 8, 27]"
  ],
  "hint": "Each element is squared.",
  "answer": "[1, 4, 9]",
  "explanation": "map applies the function to each element.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a3"
  },
  "question": "Which HTML tag is used for the largest heading?",
  "options": [
    "<h1>",
    "<h2>",
    "<h3>",
    "<h6>"
  ],
  "hint": "It's the first heading tag.",
  "answer": "<h1>",
  "explanation": "<h1> is the largest heading tag.",
  "category": "HTML+CSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a4"
  },
  "question": "What CSS property is used to change the text color?",
  "options": [
    "color",
    "background-color",
    "font-color",
    "text-color"
  ],
  "hint": "It's a simple property name.",
  "answer": "color",
  "explanation": "The 'color' property sets the text color.",
  "category": "HTML+CSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a5"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log(typeof NaN);\n```",
  "options": [],
  "hint": "NaN is a special value in JavaScript.",
  "answer": "number",
  "explanation": "typeof NaN is 'number' in JavaScript.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a6"
  },
  "question": "Which command stages all changes for the next commit in Git?",
  "options": [
    "git add .",
    "git commit -a",
    "git stage all",
    "git push"
  ],
  "hint": "It's a short command with a dot.",
  "answer": "git add .",
  "explanation": "'git add .' stages all changes in the current directory.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a7"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].filter(x => x > 1));\n```",
  "options": [
    "[2, 3]",
    "[1, 2, 3]",
    "[1, 2]",
    "[3]"
  ],
  "hint": "filter returns elements that match the condition.",
  "answer": "[2, 3]",
  "explanation": "filter returns elements greater than 1.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a8"
  },
  "question": "Which of the following is a valid way to create a React functional component?",
  "options": [
    "function MyComponent() {}",
    "const MyComponent = () => {}",
    "Both A and B",
    "class MyComponent extends React.Component {}"
  ],
  "hint": "There are two valid ways.",
  "answer": "Both A and B",
  "explanation": "You can use a function declaration or an arrow function.",
  "category": "React"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355a9"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].reduce((a, b) => a + b, 0));\n```",
  "options": [],
  "hint": "reduce accumulates the sum.",
  "answer": "6",
  "explanation": "1 + 2 + 3 = 6.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355aa"
  },
  "question": "Which Git command shows the commit history?",
  "options": [
    "git log",
    "git history",
    "git show",
    "git commits"
  ],
  "hint": "It's a three-letter command.",
  "answer": "git log",
  "explanation": "'git log' shows the commit history.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355ab"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].find(x => x > 1));\n```",
  "options": [],
  "hint": "find returns the first element that matches the condition.",
  "answer": "2",
  "explanation": "2 is the first element greater than 1.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355ac"
  },
  "question": "Which TailwindCSS class would you use to make an element display as a flex container?",
  "options": [
    "flex",
    "block",
    "inline-flex",
    "grid"
  ],
  "hint": "It's a four-letter class.",
  "answer": "flex",
  "explanation": "'flex' makes the element a flex container.",
  "category": "TailwindCSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355ad"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].every(x => x > 0));\n```",
  "options": [],
  "hint": "every checks if all elements match the condition.",
  "answer": "true",
  "explanation": "All elements are greater than 0.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355ae"
  },
  "question": "Which HTML element is used for inserting a line break?",
  "options": [
    "<br>",
    "<hr>",
    "<p>",
    "<div>"
  ],
  "hint": "It's a two-letter tag.",
  "answer": "<br>",
  "explanation": "<br> inserts a line break.",
  "category": "HTML+CSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355af"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].some(x => x > 2));\n```",
  "options": [],
  "hint": "some checks if at least one element matches the condition.",
  "answer": "true",
  "explanation": "3 is greater than 2, so some returns true.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b0"
  },
  "question": "Which command is used to clone a repository in Git?",
  "options": [
    "git clone <url>",
    "git copy <url>",
    "git fetch <url>",
    "git pull <url>"
  ],
  "hint": "It uses the word 'clone'.",
  "answer": "git clone <url>",
  "explanation": "'git clone <url>' clones a repository.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b1"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].join('-'));\n```",
  "options": [],
  "hint": "join concatenates array elements with the given separator.",
  "answer": "1-2-3",
  "explanation": "join('-') joins the elements with a dash.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b2"
  },
  "question": "Which TailwindCSS class would you use to add padding of 8 units to all sides?",
  "options": [
    "p-8",
    "px-8",
    "py-8",
    "pt-8"
  ],
  "hint": "'p-' applies padding to all sides.",
  "answer": "p-8",
  "explanation": "'p-8' adds padding to all sides.",
  "category": "TailwindCSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b3"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].reverse()[0]);\n```",
  "options": [],
  "hint": "reverse reverses the array in place.",
  "answer": "3",
  "explanation": "reverse() makes the array [3, 2, 1], so the first element is 3.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b4"
  },
  "question": "Which command is used to remove a file from the staging area in Git?",
  "options": [
    "git reset <file>",
    "git rm <file>",
    "git remove <file>",
    "git unstage <file>"
  ],
  "hint": "It uses the word 'reset'.",
  "answer": "git reset <file>",
  "explanation": "'git reset <file>' removes a file from the staging area.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b5"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].slice(1));\n```",
  "options": [],
  "hint": "slice returns a shallow copy of a portion of an array.",
  "answer": "[2, 3]",
  "explanation": "slice(1) returns elements from index 1 onward.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b6"
  },
  "question": "Which HTML attribute is used to specify an alternate text for an image?",
  "options": [
    "alt",
    "src",
    "title",
    "href"
  ],
  "hint": "It's a three-letter attribute.",
  "answer": "alt",
  "explanation": "The 'alt' attribute specifies alternate text for an image.",
  "category": "HTML+CSS"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b7"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].shift());\n```",
  "options": [],
  "hint": "shift removes the first element from an array.",
  "answer": "1",
  "explanation": "shift() removes and returns the first element.",
  "category": "JavaScript"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b8"
  },
  "question": "Which command is used to fetch and merge changes from the remote repository in Git?",
  "options": [
    "git pull",
    "git fetch",
    "git merge",
    "git update"
  ],
  "hint": "It's a two-word command.",
  "answer": "git pull",
  "explanation": "'git pull' fetches and merges changes from the remote repository.",
  "category": "Git"
},
{
  "_id": {
    "$oid": "6864edaa342008d06ea355b9"
  },
  "question": "What is the output of the following code?\n\n```js\nconsole.log([1, 2, 3].pop());\n```",
  "options": [],
  "hint": "pop removes the last element from an array.",
  "answer": "3",
  "explanation": "pop() removes and returns the last element.",
  "category": "JavaScript"
}]